applicationName: "common-service"
labels:
  group: com.stakater.platform
  provider: stakater
  version: 1.0.0
deployment:
  additionalLabels: {}
    # key: value
  annotations: {}
    # key: value
  podLabels: 
    app: "common-service"
  replicas: 1
  imagePullSecrets: ""
  env: {}
  # - name: envVarName1
  #   value: "temp-value1"
  # - name: envVarName2
  #   value: "temp-value2"
  
  volumeMounts: {}
    # - mountPath: /path
    #   name: volume-name
  volumes: {}
    # - name: volume-name
    #   persistentVolumeClaim:
    #     claimName: claim-name
    # - name: volume2
    #   emptyDir: {}

  tolerations: []
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "app"
  #   effect: "NoSchedule"
  
  image:
    repository: stakater/application
    tag: 1.0.0
    pullPolicy: IfNotPresent
  
  probes: {}
    # readinessProbe:
    #   failureThreshold: 3
    #   periodSeconds: 10
    #   successThreshold: 1
    #   timeoutSeconds: 1
    #   initialDelaySeconds: 10
    #   httpGet:
    #     path: /health
    #     port: 8080
    # livenessProbe:
    #   failureThreshold: 3
    #   periodSeconds: 10
    #   successThreshold: 1
    #   timeoutSeconds: 1
    #   initialDelaySeconds: 10
    #   httpGet:
    #     path: /health
    #     port: 8080
  resources: {}
    # limits:
    #   memory: "128Mi"
    #   cpu: "0.5"
    # requests:
    #   memory: "64Mi"
    #   cpu: "0.1"
  
  additionalContainers: {}
    # name: "container-name"
    # image:
    #   name: image-name
    #   tag: image-tag

  securityContext: {}
    #fsGroup: 2000  

service:
  additionalLabels: {}
    # expose: true
  annotations: {}
    # config.xposer.stakater.com/Domain: dummy.com   
  
  ports:
  - port: 8080
    name: http
    protocol: TCP
    targetPort: 8080
  # - port: 8081
  #   name: http
  #   protocol: TCP
  #   targetPort: 8081

rbac:
  create: true
  serviceAccount:
    create: true
    #name: "my-svc-account"
    additionalLabels: {}
      # key: value
    annotations: {}
      # key: value
  roles:
  - name: configmaps
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - get
  - name: secrets
    rules:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get

configMap:
  additionalLabels: {}
    # key: value
  annotations: {}
    # key: value
  data:
    key1: value1
    key2: value2
secret: 
  additionalLabels: {}
    # key: value
  annotations: {}
    # key: value
  data:
    secretKey1: secretValue1
    secretKey2: secretValue2